#!/usr/bin/env perl

##
# RF Correlate
# RNA Framework [http://www.rnaframework.com]
#    
# Author:  Danny Incarnato (dincarnato[at]rnaframework.com)
# Summary: Calculates correlation between datasets
#
# This program is free software, and can be redistribute  and/or modified
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# Please see <http://www.gnu.org/licenses/> for more informations.
##

use strict;
use Config;
use File::Basename;
use FindBin qw($Bin);
use Getopt::Long qw(:config no_ignore_case);
use threads;
use threads::shared;

use lib $Bin . "/lib";

use Core::Mathematics qw(:all);
use Core::Statistics;
use Core::Utils;
use RF::Data::IO::XML;
use Term::Constants qw(:screen);
use Term::Table;

die "\n  [!] Error: This program requires ithreads." .
    "\n             Please recompile Perl with ithreads and try again\n\n" unless(exists $Config{useithreads});

$|++;

my ($output, $overwrite, $help, $minvalues,
    $threads, $table, $skipoverall, @pool,
    @xml, @overall, %xml);

my @ids : shared;
my @allreactivities1 : shared;
my @allreactivities2 : shared;
my %correlations : shared;
my %results : shared;
%results = ( diffseq     => 0,
             nominvalues => 0,
             failed      => 0,
             correlated  => 0 );

do {
    
    local $SIG{__WARN__} = sub { };

    GetOptions( "h|help"         => \$help,
                "o|output=s"     => \$output,
                "ow|overwrite"   => \$overwrite,
                "m|min-values=s" => \$minvalues,
                "p|processors=i" => \$threads,
                "s|skip-overall" => \$skipoverall ) or help(1);
    
    @xml = uniq(@ARGV);

};

help() if ($help);

# Default
$output ||= "rf_correlate.csv";
$threads ||= 1;
$minvalues = round($minvalues) if (isnumeric($minvalues) &&
                                   $minvalues > 1);

$output =~ s/(?:\.csv)?$/\.csv/ if (defined $output);

##
# Input validation
##

die "\n  [!] Error: No output directory specified\n\n" unless(defined $output);
die "\n  [!] Error: 2 XML directories/files required\n\n" if (@xml != 2);
die "\n  [!] Error: Number of processors must be an integer greater than 0\n\n" if ($threads < 1);
die "\n  [!] Error: Miminum number of values must be greater than 0\n\n" if (defined $minvalues &&
                                                                             (!isnumeric($minvalues) ||
                                                                              $minvalues == 0));

print "\n[+] Importing input XML directories\/files...";

for (@xml) {
    
    die "\n\n  [!] Error: Provided XML directory\/file doesn't exist\n\n" if (!-e $_);
    
    if (-d $_) {
        
        $_ =~ s/\/?$/\//;
        
        opendir(my $dh, $_) or die "\n\n  [!] Error: Unable to read from input directory \"" . $_ . "\" (" . $! . ")\n\n";
        while(my $file = readdir($dh)) {
        
            next if ($file !~ m/\.xml$/);
            
            $file =~ s/\.xml//;
            $xml{$file}++;
            
        }
        close($dh);
        
    }
    else { $xml{(fileparse($_, ".xml"))[0]}++; }
    
}

# Delete all transcripts that are not common to all XML directories
for (keys %xml) { delete($xml{$_}) if ($xml{$_} != @xml); }

print " " . (keys %xml) . " common transcripts.";

die "\n\n  [!] Error: No common transcript ID found between XML directories\/files\n\n" unless(keys %xml);

if (-e $output) {

    if ($overwrite) { unlink($output) or die  "\n\n  [!] Error: Unable to overwrite output file (" . $! . ")\n\n"; }
    else { die "\n\n  [!] Error: Output file already exists." .
               "\n      Please use -ow (or --overwrite) to overwrite output file\n\n"; }
    
}

open(my $wh, ">", $output) or die "\n\n  [!] Error: Unable to write output file (" . $! . ")\n\n";
select((select($wh), $|=1)[0]);

print "\n[+] Calculating correlations [Last: none]";

@ids = keys %xml;
@pool = map{ threads->create(\&correlate) } 1 .. $threads;
$_->join() for(@pool);

close($wh);

if (!$skipoverall) {
    
    @overall = pearson(\@allreactivities1, \@allreactivities2);
    
    print "\n[+] Overall correlation: " . sprintf("%.3f", $overall[0]) . " (p-value: " . sprintf("%.2e", $overall[1]) . ")";

}

print "\n[+] Top 10 correlated transcripts:\n\n";

$table = Term::Table->new(indent => 2);
$table->head("Transcript", "Correlation", "p-value");
$table->row($_, sprintf("%.3f", $correlations{$_}->[0]), sprintf("%.2e", $correlations{$_}->[1])) for ((sort {$correlations{$b}->[0] <=> $correlations{$a}->[0] } keys %correlations)[0 .. min(scalar(keys(%correlations)) - 1, 9)]);
$table->print();

print "\n\n[+] Combination statistics:\n" .
      "\n  [*] Combined transcripts:  " . $results{correlated} .
      "\n  [*] Discarded transcripts: " . $results{failed} . " total" .
      "\n                             " . ($results{failed} - $results{diffseq} - $results{nominvalues}) . " XML parsing failed" .
      "\n                             " . $results{diffseq} . " mismatch between transcript sequences" .
      "\n                             " . $results{nominvalues} . " not enaugh values for correlation calculation";

print "\n\n[+] All done.\n\n";

sub correlate {
    
    while (1) {
        
        my ($id, $xmlref1, $xmlref2, $nbases,
            $sequence, $reactive, @reactivity1, @reactivity2,
            @commonidx, @pearson);
        
        { lock(@ids);
          $id = shift(@ids) if (@ids); }
        
        last unless($id);
        
        eval {
            
            no warnings;
            
            $xmlref1 = RF::Data::IO::XML->new(file => -d $xml[0] ? $xml[0] . $id . ".xml" : $xml[0]);
            $xmlref2 = RF::Data::IO::XML->new(file => -d $xml[1] ? $xml[1] . $id . ".xml" : $xml[1]);
            
        };
        
        if ($@) { # Exception from eval
            
            lock(%results);
            $results{failed}++;
            
            undef($@);
            
            next;
                
        }
        
        if ($xmlref1->sequence() ne $xmlref2->sequence()) {
            
            lock(%results);
            $results{diffseq}++;
            $results{failed}++;
            
            undef($@);
            
            next;
            
        }
        
        $reactive = $xmlref1->reactive() || "ACGT";
        $sequence = $xmlref1->sequence();
        ($nbases) = $sequence =~ s/([$reactive])/$1/g;
        
        @reactivity1 = $xmlref1->reactivity();
        @reactivity2 = $xmlref2->reactivity();
        
        @commonidx = grep { isnumeric($reactivity1[$_]) &&
                            isnumeric($reactivity2[$_]) } 0 .. $#reactivity1;
        
        if (defined $minvalues) {
            
            if (($minvalues < 1 &&
                 @commonidx / $nbases < $minvalues) ||
                ($minvalues >= 1 &&
                 @commonidx < $minvalues)) {
                    
                lock(%results);
                $results{nominvalues}++;
                $results{failed}++;
                
                undef($@);
                
                next;
                
            }
            
        }
        
        @reactivity1 = @reactivity1[@commonidx];
        @reactivity2 = @reactivity2[@commonidx];
        @pearson = pearson(\@reactivity1, \@reactivity2);
        
        { lock(%results);
          $results{correlated}++;
          $correlations{$id} = shared_clone(\@pearson);
          
          if (!$skipoverall) {
            
              push(@allreactivities1, @reactivity1);
              push(@allreactivities2, @reactivity2);
            
          }
          
          print $wh join(";", $id, @pearson) . "\n"; }
        
        print CLRRET . "[+] Calculating correlations [Last: $id]";
        
    }
    
    threads->exit();
    
}

sub help {
    
    print "\n  [!] Error: Invalid option. Please check the help\n" if ($_[0]);
    
    die <<HELP;
 
 RF Correlate (v$Core::Utils::VERSION)
 RNA Framework [http://www.rnaframework.com]
    
 Author:  Danny Incarnato (dincarnato[at]rnaframework.com)
 Summary: Calculates pairwise correlations of structure probing experiments
 
 Usage:   rf-correlate [Options] XML_folder_rep1/ XML_folder_rep2/           # Whole transcriptome
          rf-correlate [Options] file_rep1.xml file_rep2.xml                 # Single transcript
 
 Options                               Description
 -p  or --processors    <int>          Number of processors to use (Default: 1)
 -o  or --output        <string>       Output CSV file (Default: rf_correlate.csv)
 -ow or --overwrite                    Overwrites output file (if the specified file already exists)
 -m  or --min-values    <float>        Minimum number of values to calculate correlation (Default: off)
                                       Note: if a value between 0 and 1 is provided, this is interpreted as a fraction of the
                                             transcript's length
 -s  or --skip-overall                 Skips overall experiment correlation calculation (faster)        
 
HELP
    
}