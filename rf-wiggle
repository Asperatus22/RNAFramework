#!/usr/bin/perl

##
# RF Wiggle (v2.0.0b)
# Epigenetics Unit @ HuGeF [Human Genetics Foundation]
#
# Author:  Danny Incarnato (danny.incarnato[at]hugef-torino.org)
# Summary: Produces WIGGLE track files from RC or XML input files
#
# This program is free software, and can be redistribute  and/or modified
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# Please see <http://www.gnu.org/licenses/> for more informations.
##

use strict;
use File::Basename;
use FindBin qw($Bin);
use Getopt::Long qw(:config no_ignore_case);
use XML::LibXML;

use lib $Bin . "/lib";

use Core::Utils;
use Core::Mathematics qw(:all);
use Data::Sequence::Utils;
use RF::Data::IO::RC;
use Term::Constants qw(:screen);

$|++;

my ($coverage, $overwrite, $ratio, $help,
    $keepbases, %stats);
%stats = ( processed => 0, 
           failed    => 0 );

do {
    
    local $SIG{__WARN__} = sub { };

    GetOptions( "h|help"          => \$help,
                "c|coverage"      => \$coverage,
                "ow|overwrite"    => \$overwrite,
                "r|ratio"         => \$ratio,
                "kb|keep-bases=s" => \$keepbases ) or help(1);

};

help() if ($help);

# Default
$keepbases //= "N";

##
# Input validation
##

die "\n  [!] Error: No sample RC/XML file or folder provided\n\n" if (!@ARGV);
die "\n  [!] Error: Options -r and -c are mutually exclusive\n\n" if ($ratio &&
                                                                      $coverage);
die "\n  [!] Error: Invalid IUPAC code\n\n" if ($keepbases !~ m/^all$/i &&
                                                !isiupac($keepbases));
for (@ARGV) { die "\n  [!] Error: Provided path \"" . $_ . "\" doesn't exist\n\n" if (!-e $_); }

$keepbases = $keepbases =~ m/^all$/i ? "ACGU" : dna2rna(join("", sort(uniq(iupac2nt(rna2dna($keepbases))))));

print "\n[+] Processing input file(s) [Current: none]";

foreach my $input (@ARGV) {
    
    my ($name, $rcio, $isxml, $output,
        @input);
    $name = $input;
    $name =~ s/\/$//;
    $name = fileparse($name, qr/\.[^.]*/);
    $name =~ s/\.(?:xml|rc)$//;
    $output = $name . ".wig" if (!$output);
    
    print CLRRET . "[+] Processing input file(s) [Current: " . $name . "]";
    
    if (!-d $input) { # Input is a file
        
        die "\n\n  [!] Error: File lacks a valid RC/XML extension\n\n" if ($input !~ m/\.(xml|rc)$/);
            
        push(@input, $input);
        
    }
    else {
        
        opendir(my $dh, $input) or die "\n\n  [!] Error: Unable to read XML files from directory\n\n";
        while(my $file = readdir($dh)) {
            
            next if ($file !~ m/\.(xml|rc)$/);
            
            push(@input, $input . "/" . $file);
            
        }
        closedir($dh);
        
        die "\n\n  [!] Error: Specified folder doesn't contain any RC/XML file\n\n" unless(@input);
        
    }
    
    if (-e $output) {
    
        if ($overwrite) {
            
            unlink($output) or die "\n\n  [!] Error: Unable to overwrite output file (" . $! . ")\n\n";
            
        }
        else { die "\n\n  [!] Error: Output file already exists." .
                   "\n      Please use -ow (or --overwrite) to overwrite it\n\n"; }
        
    }
    
    open(my $wh, ">", $output) or die "\n\n  [!] Error: Unable to write output WIGGLE file (" . $! . ")\n\n";
    select((select($wh), $|=1)[0]);
    
    print $wh "track type=wiggle_0 name=\"" . $name . ($isxml ? " Reactivity" : ($coverage ? " Coverage" : ($ratio ? " Ratio" : " Counts"))) . "\"\n";
        
    foreach my $file (@input) {

        $stats{processed}++;
        
        if ($file =~ m/\.xml$/) {
        
            my ($xmlref, $id, $reactivity, $i,
                $sequence, @reactivity);
            
            eval { $xmlref = XML::LibXML->load_xml(location => $file); };
            
            if ($@) {
    
                $stats{failed}++;
                
                undef($@);
                
                next;
                
            }
            
            $i = 0;
            $id = $xmlref->findnodes("/data/transcript/\@id")->to_literal();
            $sequence = $xmlref->findnodes("/data/transcript/sequence")->to_literal();
            $reactivity = $xmlref->findnodes("/data/transcript/reactivity")->to_literal();
            $reactivity =~ s/\s+?//g;
            @reactivity = split(/,/, $reactivity);
            
            next if (!sum(grep {$_ !~ m/^NaN$/i} @reactivity));
            
            print $wh "variableStep chrom=" . $id . "\n";
            
            undef($reactivity[$-[0]]) while($sequence =~ m/[^$keepbases]/g);
            
            for (@reactivity) {
                
                $i++;
                
                print $wh $i . " " . $_ . "\n" if ($_ &&
                                                   !isnan($_));
                
            }
            
        }
        else {
            
            eval { $rcio = RF::Data::IO::RC->new(file => $input); };
            
            if ($@) { 
            
                $stats{failed}++;
                
                undef($@);
                
                next;
            
            }
            
            while(my $entry = $rcio->read()) {
                
                next if (($coverage && !sum($entry->coverage())) ||
                         (!$coverage && !sum($entry->counts())));
                
                my ($i, $sequence, @counts, @coverage);
                $i = 0;
                $sequence = $entry->sequence();
                @counts = $entry->counts();
                @coverage = $entry->coverage();
                
                print $wh "variableStep chrom=" . $entry->id() . "\n";
                
                while($sequence =~ m/[^$keepbases]/g) {
                    
                    undef($counts[$-[0]]);
                    undef($coverage[$-[0]]);
                    
                }
                
                for (0 .. $#coverage) {
                    
                    $i++;
                
                    if ($coverage[$_]) {
                
                        if ($coverage) { print $wh $i . " " . $coverage[$_] . "\n"; }
                        elsif ($ratio) { print $wh $i . " " . ($counts[$_] / $coverage[$_]) . "\n" if ($counts[$_]); }
                        else { print $wh $i . " " . $counts[$_] . "\n" if ($counts[$_]); }
                    
                    }
                
                }
                
            }
            
        }
    
    }
    
    close($wh);
    
}

print CLRRET . "[+] Processing input file(s) [Total: " . $stats{processed} . "]";

if ($stats{failed}) {
    
    die "\n\n  [!] Error: Parsing failed for all files." .
        "\n      Please check your input and try again\n\n" if ($stats{failed} == $stats{processed});
    
    warn "\n\n  [!] Warning: Parsing failed for " . $stats{failed} . " files.\n\n";
    
}

print "\n[+] All done.\n\n";

sub help {
    
    print "\n  [!] Error: Invalid option. Please check the help\n" if ($_[0]);
    
    die <<HELP;
 
 RF Wiggle (v2.0.2b)
 RNA Framework [http://www.rnaframework.com]
    
 Author:  Danny Incarnato (dincarnato[at]rnaframework.com)
 Summary: Produces WIGGLE track files from RC or XML input files
 
 Usage:   rf-wiggle [Options] Sample.rc
          rf-wiggle [Options] transcript.xml
          rf-wiggle [Options] RC_XML_folder/
 
 Options                                     Description
 -ow or --overwrite                          Overwrites output file (if the specified file already exists)
 -c  or --coverage                           Reports per-base coverage instead of RT-stop/mutation count
                                             Note: this option only works for RC files
 -r  or --ratio                              Reports per-base ratio between RT-stop/mutation count and coverage
                                             Note: this option only works for RC files
 -kb or --keep-bases        <string>         Bases to report in the WIGGLE file (Default: N)
 
HELP
    
}