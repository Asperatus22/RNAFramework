#!/usr/bin/env perl

##
# RF PeakCall (v2.5)
# RNA Framework [http://www.rnaframework.com]
#    
# Author:  Danny Incarnato (dincarnato[at]rnaframework.com)
# Summary: Performs peak calling of RNA immunoprecipitation (IP) experiments
#
# This program is free software, and can be redistribute  and/or modified
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# Please see <http://www.gnu.org/licenses/> for more informations.
##

use strict;
use Config;
use File::Basename;
use File::Path qw(mkpath rmtree);
use FindBin qw($Bin);
use Getopt::Long qw(:config no_ignore_case);
use threads;
use threads::shared;

use lib $Bin . "/lib";

use Core::Mathematics qw(:all);
use Core::Statistics;
use RF::Data::IO::RC;
use Term::Constants qw(:screen);

$|++;

die "\n  [!] Error: This program requires ithreads." .
    "\n             Please recompile Perl with ithreads support and try again\n\n" unless(defined $Config{useithreads});

my ($help, $output, $overwrite, $win,
    $pvalue, $pseudocount, $meancov, $mediancov,
    $control, $ip, $index, $enrich,
    $threads, $rc, $decimals, $offset,
    $mergedist, @index, @pool, @imeans);

my @qcaller : shared;
my @qresults : shared;
my %results : shared;
%results = ( cov      => 0,
             incov    => 0,
             diffcseq => 0,
             nocid    => 0,
             pass     => 0,
             peaks    => 0 );

do {
    
    local $SIG{__WARN__} = sub { };

    GetOptions( "h|help"               => \$help,
                "o|output=s"           => \$output,
                "ow|overwrite"         => \$overwrite,
                "w|window=i"           => \$win,
                "mc|mean-coverage=s"   => \$meancov,
                "ec|median-coverage=s" => \$mediancov,
                "c|control=s"          => \$control,
                "I|IP=s"               => \$ip,
                "i|index=s"            => \$index,
                "D|decimals=i"         => \$decimals,
                "p|processors=i"       => \$threads,
                "f|offset=i"           => \$offset,
                "e|enrichment=s"       => \$enrich,
                "v|p-value=s"          => \$pvalue,
                "pc|pseudocount=s"     => \$pseudocount,
                "md|merge-distance=i"  => \$mergedist ) or help(1);

};

help() if ($help);

# Default
$threads ||= 1;
$win ||= 150;
$offset ||= round($win / 2);
$enrich ||= 3;
$mergedist //= 50;
$pvalue //= 0.05;
$pseudocount ||= 1;
$decimals ||= 3;
$meancov //= 0;
$mediancov //= 0;

die "\n  [!] Error: No IP sample RC file provided\n\n" if (!defined $ip);
die "\n  [!] Error: Provided IP sample RC file doesn't exist\n\n" if (!-e $ip);
die "\n  [!] Error: Provided control sample RC file doesn't exist\n\n" if (defined $control &&
                                                                           !-e $control);
die "\n  [!] Error: Number of processors must be an integer greater than 0\n\n" if ($threads < 1);
die "\n  [!] Error: Decimals value must be an integer comprised between 1 and 10\n\n" if ($decimals < 1 ||
                                                                                          $decimals > 10);
die "\n  [!] Error: Window's size must be an integer >= 10" if ($win < 10);
die "\n  [!] Error: P-value must be numeric\n\n" if (!isnumeric($pvalue));
die "\n  [!] Error: P-value must be comprised between 0 and 1\n\n" if (!ispositive($pvalue) ||
                                                                       $pvalue > 1);
die "\n  [!] Error: Pseudocount value must be numeric\n\n" if (!isnumeric($pseudocount));
die "\n  [!] Error: Pseudocount value must be > 0\n\n" if (!$pseudocount);
die "\n  [!] Error: Enrichment value must be numeric\n\n" if (!isnumeric($enrich));
die "\n  [!] Error: Enrichment value must be > 0\n\n" if (!$enrich);
die "\n  [!] Error: Mean coverage value must be numeric\n\n" if (!isnumeric($meancov));
die "\n  [!] Error: Mean coverage value must be >= 0\n\n" if (!ispositive($meancov));
die "\n  [!] Error: Median coverage value must be numeric\n\n" if (!isnumeric($mediancov));
die "\n  [!] Error: Median coverage value must be >= 0\n\n" if (!ispositive($mediancov));

warn "\n  [!] Warning: No control sample RC file provided. Background will be estimated on IP sample only.\n" if (!defined $control);

if (!defined $output) {
    
    my ($cid, $iid);
    $cid = fileparse($control, qr/\.[^.]*/) if (defined $control);
    $iid = fileparse($ip, qr/\.[^.]*/);
    
    $output = (defined $control ? $iid . "_vs_" . $cid : $iid) . ".bed";
    
}
else { $output =~ s/(\.bed)?$/.bed/; }

print "\n[+] Checking output file...";

if (-e $output) {

    if ($overwrite) { unlink($output) or die "\n\n  [!] Error: Unable to overwrite output file (" . $! . ")\n\n"; }
    else { die "\n\n  [!] Error: Output file already exists." .
               "\n      Please use -ow (or --overwrite) to overwrite output file\n\n"; }
    
}

@index = split(/,/, $index);

# In case no index has been provided, we rebuild the index before generating the working threads
# The new index will be generated in the same path of the rc file, with extension .rci
if (!@index) {
    
    print "\n[+] Regenerating RTI index files...";
    
    $rc = RF::Data::IO::RC->new( file       => $control,
                                 buildindex => 1 ) if (defined $control);
    
}

$rc = RF::Data::IO::RC->new( file       => $ip,
                             index      => @index ? $index[-1] : undef,
                             buildindex => 1 );

print "\n[+] Loading transcript IDs... ";

@qcaller = $rc->ids();

print scalar(@qcaller) . " transcripts loaded." .
      "\n[+] Calling peaks [Last: none]";

@pool = map{ threads->create(\&call) } 1 .. $threads;
$_->join() for(@pool);

if ($results{peaks}) {

    print "\n[+] Sorting peaks...";
    
    # Sort lexicographically by transcript ID and numerically by start position
    @qresults = sort {$a->[0] cmp $b->[0] ||
                      $a->[1] <=> $b->[1]} @qresults;
    
    print "\n[+] Writing output BED file...";
    
    open(my $wh, ">", $output) or die "\n\n  [!] Error: Unable to write output BED file (" . $! . ")\n\n";
    select((select($wh), $|=1)[0]);
    print $wh join("\t", @{$_}) . "\n" for (@qresults);
    close($wh);
    
}

print "\n[+] Calling statistics:\n" .
      "\n  [*] Covered transcripts:   " . $results{cov} . " total" .
      "\n                             " . $results{pass} . " transcripts with detected enrichment" .
      "\n                             " . $results{peaks} . " called peaks" .
      "\n  [*] Discarded transcripts: " . ($results{incov} + $results{diffcseq} + $results{nocov} + $results{nocid}) . " total" .
      "\n                             " . $results{incov} . " insufficient coverage" .
      "\n                             " . $results{diffcseq} . " mismatch between IP and control sample sequence" .
      "\n                             " . $results{nocid} . " absent in control sample reference";
      
print "\n\n[+] All done.\n\n";

sub call {
    
    my ($crc, $irc, $attributes, $scale);
    
    $crc = RF::Data::IO::RC->new( file  => $control,
                                  index => @index ? $index[0] : $control . ".rci" ) if (defined $control);
    
    $irc = RF::Data::IO::RC->new( file  => $ip,
                                  index => @index ? $index[-1] : $ip . ".rci"); 
    
    while (1) {
        
        my ($id);
        
        { lock(@qcaller);
          $id = shift(@qcaller) if (@qcaller); }
        
        last unless($id); 
        
        my ($ientry, $sequence, $imedian, $cmedian,
            $last, @icov, @ccov, @pvalues,
            @wins);
        $ientry = $irc->read($id);
        $imedian = $ientry->mediancoverage();
        $sequence = $ientry->sequence();
        @icov = $ientry->coverage();
        
        if (defined $control) {
        
            if (my $centry = $crc->read($id)) {
                
                $cmedian = $centry->mediancoverage();
                
                if ($centry->sequence() ne $sequence) {
                    
                    lock(%results);
                    $results{diffcseq}++;
            
                    next;
                    
                }
                
                if ($centry->meancoverage() < $meancov ||
                    $cmedian < $mediancov) {
                    
                    lock(%results);
                    $results{incov}++;
            
                    next;
                    
                }
                
                @ccov = $centry->coverage();
                
            }
            else {
            
                lock(%results);
                $results{nocid}++;
                
                next;
                
            }
        
        }
        
        for (my $i = 0; $i < $#icov; $i += $offset) {
        
            my ($start, $end, $score, $cmean, $imean,
                $p, @ctrlwin, @ipwin);
            $start = $i;
            
            if ($start + $win > $#icov) {
            
                $start = $#icov - $win >= 0 ? $#icov - $win : 0;
                $end = $#icov;
                
            }
            else { $end = $start + $win; }
            
            $imean = mean(@icov[$start .. $end]);
            
            if (defined $control) {
            
                $cmean = mean(@ccov[$start .. $end]);
                $score = logarithm((($imean + $pseudocount) / ($imedian + $pseudocount)) / (($cmean + $pseudocount) / ($cmedian + $pseudocount)), 2);
            
            }
            else { $score = logarithm((($imean + $pseudocount) / ($imedian + $pseudocount)), 2); }
        
            push(@wins, { coords => [$start, $end],
                          score  => [$score],
                          imean  => $imean,
                          cmean  => $cmean,
                          pvalue => undef });
        
        }
        
        { lock(%results);
          $results{cov}++;
                  
          print CLRRET . "[+] Calling peaks [Last: $id]"; }
            
        @imeans = map { $_->{imean} } @wins;
        
        foreach my $win (@wins) {
            
            my $p = defined $control ? fisher(round($win->{imean}), round($imedian), round($win->{cmean}), round($cmedian), 1) :
                                       fisher(round($win->{imean}), round($imedian), round(mean(@imeans)), round($imedian), 1);
            $win->{pvalue} = $p;
            
        }
        
        @pvalues = grep { isnumeric($_) } (map { $_->{pvalue} } @wins);
        
        next if (!@pvalues);
    
        @pvalues = padjust(\@pvalues); # Benjamini-Hochberg adjusted p-values
        
        foreach my $win (@wins) { $win->{pvalue} = [ shift(@pvalues) ] if (isnumeric($win->{pvalue})); }    # Update p-values with BH adjusted p-values
        
        # Delete peaks whose corrected p-value is greater than cutoff
        # or whose enrichment is lower than cutoff
        for (my $i = 0; $i < @wins; $i++) {
        
            if (!isnumeric($wins[$i]->{pvalue}->[0]) ||
                $wins[$i]->{pvalue}->[0] >= $pvalue ||
                $wins[$i]->{score}->[0] < $enrich) {
                
                splice(@wins, $i, 1);
                
                $i--;
                
            }
        
        }
        
        next if (!@wins);
        
        $last = shift(@wins);
        
        while(my $current = shift(@wins)) {
        
            if (intersect($current->{coords}, [$last->{coords}->[0], $last->{coords}->[1] + $mergedist])) {
                
                $last->{coords}->[1] = $current->{coords}->[1];
                push(@{$last->{score}}, $current->{score}->[0]);
                push(@{$last->{pvalue}}, $current->{pvalue}->[0]);
                
            }
            else {
                
                { lock(%results);
                  $results{peaks}++; }
                
                { lock(@qresults);
                  push(@qresults, shared_clone([$id, $last->{coords}->[0], $last->{coords}->[1], sprintf("%." . $decimals . "f", mean(@{$last->{score}})), sprintf("%." . $decimals . "e", pcombine($last->{pvalue}, "S"))])); }
                
                $last = $current;
                
            }
        
        }
        
        { lock(@qresults); 
          push(@qresults, shared_clone([$id, $last->{coords}->[0], $last->{coords}->[1], sprintf("%." . $decimals . "f", mean(@{$last->{score}})), sprintf("%." . $decimals . "e", pcombine($last->{pvalue}, "S"))])); }
        
        { lock(%results);
          $results{pass}++;
          $results{peaks}++; }
        
    }
    
}

sub help {
    
    print "\n  [!] Error: Invalid option. Please check the help\n" if ($_[0]);
    
    die <<HELP;
 
 RF PeakCall (v2.5)
 RNA Framework [http://www.rnaframework.com]
    
 Author:  Danny Incarnato (dincarnato[at]rnaframework.com)
 Summary: Performs peak calling of RNA immunoprecipitation (IP) experiments
 
 Usage:   rf-peakcall [Options]
 
 Options                                        Description
 -c  or --control          <string>             Control sample RC file
 -I  or --IP               <string>             Immunoprecipitated (IP) sample RC file
 -i  or --index            <string>[,<string>]  A comma separated (no spaces) list of RTI index files for the provided RC files.
                                                Note: RCI files must be provided in the order: 1. Control, 2. IP.
                                                If a single RCI file is specified along with both control and IP sample,
                                                it will be used for all samples.
                                                If no RCI index is provided, it will be created at runtime, and stored in
                                                the same folder of the control, and IP samples.
 -p  or --processors       <int>                Number of processors to use (Default: 1)
 -o  or --output           <string>             Output file (Default: <IP>_vs_<Control>.bed if a control RC file is provided, or
                                                                      <IP>.bed if only IP RC file is provided)
 -ow or --overwrite                             Overwrites output file (if the specified file already exists)
 -w  or --window           <int>                Window's size for peak calling (>=10, Default: 150)
 -f  or --offset           <int>                Offset for window sliding (>=1, Default: Window's size / 2)
 -md or --merge-distance   <int>                Maximum distance in nt for merging non-overlapping windows (>=0, Default: 50)
 -e  or --enrichment       <float>              Minimum log2 enrichment in IP vs. control sample, for reporting a peak (>=1, Default: 3)
 -v  or --p-value          <float>              P-value cutoff for reporting a peak (0<=p<=1, Default: 0.05)
 -pc or --pseudocount      <float>              Pseudocount added to read counts to avoid division by 0 (>0, Default: 1)
 -mc or --mean-coverage    <float>              Discards any transcript with mean coverage below this threshold (>=0, Default: 0)
 -ec or --median-coverage  <float>              Discards any transcript with median coverage below this threshold (>=0, Default: 0)
 -D  or --decimals         <int>                Number of decimals for reporting enrichment/p-value (1-10, Default: 3)

HELP
    
}

