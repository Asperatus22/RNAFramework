#!/usr/bin/env perl

##
# RF RCTools
# RNA Framework [http://www.rnaframework.com]
#
# Author:  Danny Incarnato (dincarnato[at]rnaframework.com)
# Summary: Easy manipulation of RC files
#
# This program is free software, and can be redistribute  and/or modified
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# Please see <http://www.gnu.org/licenses/> for more informations.
##

use strict;
use File::Basename;
use File::Copy;
use File::Path qw(mkpath);
use FindBin qw($Bin);
use Getopt::Long qw(:config no_ignore_case);

use lib $Bin . "/lib";

use Core::Mathematics qw(:all);
use Core::Utils;
use RF::Data::IO::RC;
use RF::Data::RC;

$|++;

my ($output, $overwrite, $command, $help,
    $tmp, $tmpdir, $madetmp, $index,
    $tab, $annoFile, $GTFfeature, $GTFattribute,
    @index, @rc, %commands);

%commands = map { $_ => 1 } qw(index view merge stats extract);

do {

    local $SIG{__WARN__} = sub { };

    GetOptions( "h|help"           => \$help,
                "o|output=s"       => \$output,
                "ow|overwrite"     => \$overwrite,
                "i|index=s"        => \$index,
                "t|tab"            => \$tab,
                "T|tmp-dir=s"      => \$tmpdir,
                "a|annotation=s"   => \$annoFile,
                "f|GTFfeature=s"   => \$GTFfeature,
                "b|GTFattribute=s" => \$GTFattribute ) or help(1);

    $command = shift(@ARGV);
    @rc = uniq(@ARGV);

};

help() if ($help);

# Default
$tmpdir ||= "/tmp";
$tmp = randalphanum(0xf);
$command = lc($command);
$GTFfeature ||= "exon";
$GTFattribute ||= "transcript_id";
undef($index) if ($command eq "index");
@index = split(/,/, $index);

$tmpdir =~ s/\/?$/\//;
$GTFattribute = quotemeta($GTFattribute);

##
# Input validation
##

die "\n  [!] Error: No command specified\n\n" unless($command);
die "\n  [!] Error: Invalid command \"" . $command . "\"\n\n" unless(exists $commands{$command});
die "\n  [!] Error: No RC file specified\n\n" unless(@rc);

if ($command eq "extract") {

    if ($rc[0] =~ m/\.rc$/) { die "\n  [!] Error: Provided RC file \"" . $rc[0] . "\" does not exist\n\n" if (!-e $rc[0]); }
    else { die "\n  [!] Error: RC file \"" . $rc[0] . ".plus.rc\" does not exist\n\n" if (!-e $rc[0] . ".plus.rc"); }

}
else { for (0 .. ($command =~ /^view|stats$/ ? 0 : $#rc)) { die "\n  [!] Error: Provided RC file \"" . $rc[$_] . "\" does not exist\n\n" if (!-e $rc[$_]); } }

$SIG{__DIE__} = \&cleanup;

if (!@index) {

    mktmpdir();

    for (0 .. ($command =~ /^view|stats|extract$/ ? 0 : $#rc)) {

        my ($file, $rc, $rci);
        $file = (fileparse($rc[$_], qr/((\.[^.\s]+)+)$/))[0];
        $rci = $tmpdir . $tmp . "_" . $file . ".rci";
        $rc = RF::Data::IO::RC->new( file       => $rc[$_] =~ m/\.rc$/ ? $rc[$_] : $rc[$_] . ".plus.rc",
                                     buildindex => 1,
                                     index      => $rci );

        push(@index, $rci);

    }

}
elsif (@index > 1) { die "\n  [!] Error: Different number of RC files and RCI index files provided\n\n" if (@index != @rc); }
else { @index = ($index) x @rc; }

for (0 .. $#index) {

    die "\n  [!] Error: Provided RCI index file \"" . $index[$_] . "\" does not exist\n\n" if (!-e $index[$_]);
    #die "\n  [!] Error: Provided RC file \"" . $rc[$_] . "\" does not exist\n\n" if (!-e $rc[$_]);

}

if ($command eq "index") {

    for (@rc) {

        my $file = (fileparse($_, qr/((\.[^.\s]+)+)$/))[0];
        move($tmpdir . $tmp . "_" . $file . ".rci", $_ . ".rci") or die "\n  [!] Error: Unable to copy RCI index file (" . $! . ")\n\n";

    }

}
elsif ($command =~ m/^view|stats$/) {

    my $rcin = RF::Data::IO::RC->new( file  => $rc[0],
                                      index => $index[0] );

    if ($rc[1]) {

        for (split(/[;,]/, $rc[1])) {

            my $entry = $rcin->read($_);

            if ($command eq "view") { formatentry($entry); }
            else { print $entry->id() . "\t" . $entry->readscount() . "\n"; }

        }

    }
    else {

        while(my $entry = $rcin->read()) {

            if ($command eq "view") { formatentry($entry); }
            else { print $entry->id() . "\t" . $entry->readscount() . "\n"; }

        }

    }

    print "\nTotal\t" . $rcin->mappedreads() . "\n\n" if ($command eq "stats");

}
elsif ($command eq "merge") {

    $output ||= "merge.rc";
    $output =~ s/(?:\.rc)?$/.rc/;

    die "\n  [!] Error: Output RC file already exists." .
        "\n      Please use -ow (or --overwrite) to overwrite output filey\n\n" if (-e $output &&
                                                                                    !$overwrite);

    # Easy check: RC files should have the same size, so if one of them differs, then it cannot be merged
    die "\n [!] Error: Provided RC files have different sizes\n\n" if (@rc > 1 &&
                                                                       sum(map { (-s $rc[$_]) - (-s $rc[$_ - 1]) } 1 .. $#rc));

    my ($rcout, $mappedreads, @rcin);
    $mappedreads = 0;
    $rcout = RF::Data::IO::RC->new( file       => $output,
                                    index      => $output . ".rci",
                                    buildindex => 1,
                                    mode       => "w",
                                    overwrite  => $overwrite );
    @rcin = map { RF::Data::IO::RC->new( file  => $rc[$_],
                                         index => $index[$_] ) } 0 .. $#rc;

    while(my $entry = $rcin[0]->read()) {

        my ($merge, $readscount, @counts, @coverage);
        @counts = $entry->counts();
        @coverage = $entry->coverage();

        if (@rc > 1) {

            my @entries = map { $rcin[$_]->read($entry->id()) } 1 .. $#rcin;

            for (0 .. $#entries) {

                die "\n  [!] Error: Different sequence for transcript " . $entries[$_]->id() .
                    " between files \"" . $rc[0] . "\" and \"" . $rc[$_+1] . "\"\n\n" if ($entry->sequence() ne $entries[$_]->sequence());

                my (@tmpcounts, @tmpcoverage);
                $readscount += $entries[$_]->readscount();
                @tmpcounts = $entries[$_]->counts();
                @tmpcoverage = $entries[$_]->coverage();
                @counts = map { $counts[$_] + $tmpcounts[$_] } 0 .. $#counts;
                @coverage = map { $coverage[$_] + $tmpcoverage[$_] } 0 .. $#coverage;

            }

        }

        $merge = RF::Data::RC->new( id         => $entry->id(),
                                    sequence   => $entry->sequence(),
                                    counts     => \@counts,
                                    coverage   => \@coverage,
                                    readscount => $readscount );
        $rcout->write($merge);

    }

    $mappedreads += $_->mappedreads() for (@rcin);

    $rcout->mappedreads($mappedreads);
    $rcout->close();

}
elsif ($command eq "extract") {

    die "\n  [!] Error: No annotation file provided\n\n" if (!defined $annoFile);
    die "\n  [!] Error: Provided annotation file does not exist\n\n" if (!-e $annoFile);

    $output = (fileparse($annoFile, qr/\.(?:bed|gtf)/i))[0] . ".rc" if (!$output);
    $output =~ s/(?:\.rc)?$/.rc/;

    die "\n  [!] Error: Output RC file already exists." .
        "\n      Please use -ow (or --overwrite) to overwrite output filey\n\n" if (-e $output &&
                                                                                    !$overwrite);

    my ($rcout, $mappedreads, $annoType, $lastChr,
        %chr, %rcin, %ids);
    ($annoType) = $annoFile =~ m/\.(gtf|bed)$/i;

    die "\n  [!] Error: Annotation must have .gtf or .bed extension\n\n" if (!defined $annoType);

    $annoType = lc($annoType);
    $mappedreads = 0;
    $rcin{"+"} = RF::Data::IO::RC->new( file  => $rc[0] =~ m/\.rc$/ ? $rc[0] : $rc[0] . ".plus.rc",
                                        index => $index[0] );

    if ($rc[0] !~ m/\.rc$/ && -e $rc[0] . ".minus.rc") {

        $rcin{"-"} = RF::Data::IO::RC->new( file  => $rc[0] . ".minus.rc",
                                            index => $index[0] );

    }
    else { $rcin{"-"} = $rcin{"+"}; }

    %ids = map { $_ => $rcin{"+"}->length($_) } $rcin{"+"}->ids();

    $rcout = RF::Data::IO::RC->new( file       => $output,
                                    index      => $output . ".rci",
                                    buildindex => 1,
                                    mode       => "w",
                                    overwrite  => $overwrite );

    open(my $fh, "<", $annoFile) or die "\n  [!] Error: Unable to read from annotation file (" . $! . ")\n\n";
    while(<$fh>) {

	chomp();

        next if ($_ =~ m/^\#/);

        my ($id, @row);
        @row = split /\t/;

        next if (!exists $ids{$row[0]});

        if ($annoType eq "gtf") {

            next if ($row[2] ne $GTFfeature);
            next if ($row[4] > $ids{$row[0]}); # GTF is 1-based

            $row[3]--;
            $row[4]--;

            if (defined $GTFattribute) { ($id) = $row[8] =~ m/$GTFattribute "(.+?)"/; }
            
            $id = $row[0] . "_" . $row[3] . "-" . $row[4] if (!defined $id);

        }
        else {

            next if ($row[2] > $ids{$row[0]});

            $row[2]--;
            $id = @row < 4 ? $row[0] . "_" . $row[1] . "-" . $row[2] : $row[3];

        }

        if ($lastChr ne $row[0]) {

            if (defined $lastChr) {

                foreach my $strand (sort keys %chr) {

                    foreach my $transcript (sort keys %{$chr{$strand}}) {

                        my $rc = $rcin{$strand}->readBytewise($lastChr, @{$chr{$strand}->{$transcript}});
                        $rc->revcomp() if ($strand eq "-");
                        $rc->id($transcript);
                        $rcout->write($rc);

                    }

                }

            }

            $lastChr = $row[0];
            undef(%chr);

        }

        if ($annoType eq "gtf") { push(@{$chr{$row[6] eq "-" ? "-" : "+"}->{$id}}, [$row[3], $row[4]]); }
        else {

            next if ($row[1] == $row[2]);

            my $strand = @row >= 6 && $row[5] eq "-" ? "-" : "+";

            if (@row < 12) { push(@{$chr{$strand}->{$id}}, [$row[1], $row[2]]); }
            else {

                my (@exonSizes, @exonStarts);
                @exonSizes = split ",", $row[10];
                @exonStarts = split ",", $row[11];

                push(@{$chr{$strand}->{$id}}, [$row[1] + $exonStarts[$_], $row[1] + $exonStarts[$_] + $exonSizes[$_] - 1]) for (0 .. $row[9] - 1);

            }

        }

    }
    close($fh);

    if (defined $lastChr) {

        foreach my $strand (sort keys %chr) {

            foreach my $transcript (sort keys %{$chr{$strand}}) {

                my $rc = $rcin{$strand}->readBytewise($lastChr, @{$chr{$strand}->{$transcript}});
                $rc->revcomp() if ($strand eq "-");
                $rc->id($transcript);
                $rcout->write($rc);

            }

        }

    }

    $rcout->mappedreads($rcin{"+"}->mappedreads());
    $rcout->close();

}

cleanup();

sub formatentry {

    my $entry = shift;

    return unless($entry);

    if ($tab) {

        my (@sequence, @counts, @coverage);
        @sequence = split(//, $entry->sequence());
        @counts = $entry->counts();
        @coverage = $entry->coverage();

        print $entry->id();
        print "\n" . join("\t", $sequence[$_], $counts[$_], $coverage[$_]) for (0 .. $#sequence);
        print "\n\n";

    }
    else { print join("\n", $entry->id(), $entry->sequence, join(",", $entry->counts()), join(",", $entry->coverage())) . "\n\n"; }

}

sub mktmpdir {

    my ($error);

    if (!-e $tmpdir) {

        mkpath($tmpdir, { mode  => 0755,
                          error => \$error });

        die "\n\n  [!] Error: Unable to create temporary directory (" . $error->[0]->{each(%{$error->[0]})} . ")\n\n" if (@{$error});

        $madetmp = 1;

    }
    else { die "\n\n  [!] Error: The path to the specified temporary folder is not a directory\n\n" if (!-d $tmpdir); }

}

sub cleanup {

    my ($error);

    unlink(glob($tmpdir . $tmp . "*"));

    rmtree($tmpdir) if ($madetmp &&
                        isdirempty($tmpdir));

}

sub help {

    print "\n  [!] Error: Invalid option. Please check the help\n" if ($_[0]);
    print "\n  [!] Error: Invalid command \"" . $command . "\"\n" if ($command &&
                                                                      !exists $commands{$command});

    print <<HELP;

 RF RCTools (v$Core::Utils::VERSION)
 RNA Framework [http://www.rnaframework.com]

 Author:  Danny Incarnato (dincarnato[at]rnaframework.com)
 Summary: Easy manipulation of RC files
HELP

    if ($command eq "index") {

        die <<HELP;
 Description: Generates RCI index files for a set of input RC files
 Usage:       rf-rctools index Sample1.rc Sample2.rc ... Samplen.rc

HELP

    }
    elsif ($command eq "view") {

        die <<HELP;

 Description: Displays the content of RC files in human-readable form
 Usage:       rf-rctools view [options] Sample.rc [transcript#1,transcript#2,..,transcript#n]

 Options                Description
 -t  or --tab           Switch to tabular output format

HELP

    }
    elsif ($command eq "merge") {

        die <<HELP;

 Description: Combines multiple RC files into a single file
 Usage:       rf-rctools merge [options] Sample1.rc Sample2.rc ... Samplen.rc

 Options                                     Description
 -o  or --output     <string>                Output RC filename (Default: merge.rc)
 -ow or --overwrite                          Overwrites output file if already exists
 -i  or --index      <string>[,<string>]     A comma separated (no spaces) list of RCI index files for the provided RC files.
                                             Note: RCI files must be provided in the same order as RC files.
                                                   If a single RCI file is specified along with multiple RC files, it will be
                                                   used for all of them.
 -T  or --tmp-dir    <string>                Temporary directory (Default: /tmp)

HELP

    }
    elsif ($command eq "extract") {

        die <<HELP;

 Description: Generates an RC file by extracting a user-defined set of regions from an input RC file
 Usage:       rf-rctools extract -a annotation.gtf Sample.rc     # Will only use the specified file
              rf-rctools extract -a annotation.gtf Sample        # Will look for .plus.rc and .minus.rc files

 Options                            Description
 -o  or --output       <string>     Output RC filename (Default: <annotation>.rc)
 -ow or --overwrite                 Overwrites output file if already exists
 -a  or --annotation   <string>     BED/GTF file containing a list of regions to be extracted (mandatory)
 -f  or --GTFfeature   <string>     If a GTF file is provided, only entries corresponding to this feature type
                                    will be extracted (Default: exon)
 -b  or --GTFattribute <string>     If a GTF file is provided, this attribute will be used as the entry ID in
                                    the output RC file (Default: transcript_id)

HELP

    }
    else {

        die <<HELP;

 Usage:   rf-rctools [command]

 Commands         Description
 view             Dumps to screen the content of the provided RC file
 merge            Combines multiple RC files
 extract          Extracts a user-defined set of regions
 index            Generates RCI index
 stats            Prints per-transcript and global reads mapping statistics

HELP

    }

}
